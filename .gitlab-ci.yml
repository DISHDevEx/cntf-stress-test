#Job that populates a random IMSI ID into the database

stages:
  - install_helm
  - subscribe-and-ping
  - deploy
  - cleanup

# install_open5gs_and_ueransim:
#   image:
#     name: alpine/helm
#     entrypoint: [""]
#   stage: install_helm
#   variables:
#     REGION: us-east-1
#     CLUSTER_NAME: cntf-open5gs-cluster
#   environment:
#     name: open5gs_cluster 
#   script:
#     - apk add --no-cache python3 py3-pip 
#     - pip3 install --upgrade pip 
#     - pip3 install --no-cache-dir awscli
#     - aws --version
#     - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
#     - chmod +x kubectl
#     - mv kubectl /usr/local/bin/
#     - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
#     - kubectl apply -f cntf_tests_namespace.yaml
#     - helm repo add openverso https://gradiant.github.io/openverso-charts/
#     - helm upgrade --install cntf-open5gs openverso/open5gs --namespace cntf-tests --values https://raw.githubusercontent.com/DISHDevEx/napp/main/napp/open5gs_values/5gSA_ues_values.yaml
#     - helm upgrade --install cntf-ueransim-gnb openverso/ueransim-gnb --namespace cntf-tests --values https://raw.githubusercontent.com/DISHDevEx/napp/main/napp/open5gs_values/gnb_ues_values.yaml


subscribe-and-ping:
  allow_failure: true
  stage: subscribe-and-ping
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment: 
    name: open5gs_cluster
  artifacts:
    paths:
      - IMSI_IDs.txt  # Changed artifact name to indicate multiple IDs
  before_script:
  # Install dependencies and connect to cluster
  - apt update
  - apt install -y python3
  - python3 --version # above three steps install python 
  - apt-get install -y python3-pip
  - apt-get install -y python3 python3-pip
  - pip3 install requests
  - pip3 install --upgrade pip
  - pip3 install boto3  
  - apt-get update && apt-get install -y curl unzip
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x kubectl
  - mv kubectl /usr/local/bin/
  - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
  - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
  script: 
    - python3 ./s3_test_results_coralogix.py
    - sleep 120 # this command will allow all the network functions to finish getting set up before executing the below script
    - sh ./stress_test.sh
    # - sh ./update_s3_test_results.sh # this step is already included in the "stress_test.sh" file but perhaps it may be more optimal here?


cleanup:
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  stage: cleanup
  when: manual
  environment:
    name: open5gs_cluster
  script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
    - kubectl exec $POPULATE_POD -n openverso -- open5gs-dbctl reset
    # - helm uninstall cntf-open5gs --namespace openverso
    # - helm uninstall cntf-ueransim-gnb --namespace openverso       # this is to uninstall the second deployment of open5gs/ueransim
    # - kubectl delete namespace cntf-tests




 
    
