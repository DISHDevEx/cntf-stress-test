stages:
  # - install_helm
  # - load_network
  - send_data
  - update_tests
  - cleanup

# load 5g core with thousands of UEs

load_test:
  allow_failure: true
  stage: load_network
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment: 
    name: open5gs_cluster
  artifacts:
    paths:
      - IMSI_IDs.txt  
  before_script:
  # Install dependencies and connect to cluster
  - apt update
  - apt install -y python3
  - python3 --version
  - apt-get install -y python3-pip
  - apt-get install -y python3 python3-pip
  - pip3 install requests
  - pip3 install --upgrade pip
  - pip3 install boto3  
  - apt-get update && apt-get install -y curl unzip
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x kubectl
  - mv kubectl /usr/local/bin/
  - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
  - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate) 
  - chmod +x load_test.sh
  script: 
  - chmod +w time_to_populate_database.txt
  - kubectl -n openverso cp ./time_to_populate_database.txt $POPULATE_POD:/time_to_populate_database.txt
  - kubectl -n openverso cp ./load_test.sh $POPULATE_POD:/load_test.sh
  - kubectl -n openverso exec $POPULATE_POD -- bash -c "/load_test.sh >&1"

# send 3MB worth of data to postman endpoint as network is simultaneously being loaded with UEs

send_data_over_network:
  allow_failure: true
  stage: send_data
  image: ubuntu:latest
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  environment: 
    name: open5gs_cluster
  artifacts:
    paths:
      - IMSI_IDs.txt  
  before_script:
  # Install dependencies and connect to cluster
  - apt update
  - apt install -y python3
  - python3 --version
  - apt-get install -y python3-pip
  - apt-get install -y python3 python3-pip
  - pip3 install requests
  - pip3 install --upgrade pip
  - pip3 install boto3  
  - apt-get update && apt-get install -y curl unzip
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x kubectl
  - mv kubectl /usr/local/bin/
  - aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
  - UE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l pod-template-hash=697554b858)
  - chmod +x stress_test.sh
  script: 
    - kubectl -n openverso cp ./stress_test.sh $UE_POD:/tmp/stress_test.sh
    - kubectl -n openverso exec $UE_POD -- bash -c "/tmp/stress_test.sh >&1"
    

update_test_results:
  allow_failure: true
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  stage: update_tests
  script:
    - apk add --no-cache python3 py3-pip jq
    - pip3 install --upgrade pip 
    - pip3 install --no-cache-dir awscli
    - pip3 install --no-cache-dir boto3  
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - python3 ./s3_test_results_coralogix.py 
    - sh ./update_test_results.sh 


# Remove all UE connections

cleanup:
  image:
    name: alpine/helm
    entrypoint: [""]
  variables:
    REGION: us-east-1
    CLUSTER_NAME: cntf-open5gs-cluster
  stage: cleanup
  # when: manual                                                    # commenting this out so the cleanup runs automatically
  environment:
    name: open5gs_cluster
  script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --upgrade pip
    - pip3 install --no-cache-dir awscli
    - aws --version
    - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/
    - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    - helm repo add openverso https://gradiant.github.io/openverso-charts/
    - POPULATE_POD=$(kubectl -n openverso get pod --output=jsonpath={.items..metadata.name} -l app.kubernetes.io/component=populate)
    - kubectl exec $POPULATE_POD -n openverso -- open5gs-dbctl reset
   



 
    
